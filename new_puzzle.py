# -*- coding: utf-8 -*-
"""New Puzzle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hh_01P9PcEuZwmDJwXE1E5pcDHumc7Wf
"""

!sudo apt update
!sudo apt install libcairo2-dev ffmpeg \
    texlive texlive-latex-extra texlive-fonts-extra \
    texlive-latex-recommended texlive-science \
    tipa libpango1.0-dev
!pip install manim
!pip install IPython --upgrade

from manim import *

# Commented out IPython magic to ensure Python compatibility.
# %%manim -pql -v WARNING Fillomino

from manim import *


class Fillomino(Scene):
    def construct(self):
        def createFeature(grid, remove=False):
            tableExample = Table(
                grid,
                include_outer_lines=False,
                arrange_in_grid_config={"cell_alignment": LEFT})

            if remove:
                tableExample.remove(*tableExample.get_horizontal_lines())

            for i in range(len(grid)):
                for j in range(len(grid[0])):
                    if (grid[i][j] != ""):
                        try:
                            tableExample.add_highlighted_cell(
                                (i+1, j+1), color=getColor(grid[i][j]))
                        except:
                            print("error")
                        tableExample.add(
                            tableExample.get_cell((i+1, j+1), color=WHITE))

            return tableExample

        def getColor(value):
            if value == "1":
                color = RED_E
            elif value == "2":
                color = GOLD_E
            elif value == "3":
                color = YELLOW_E
            elif value == "4":
                color = GREEN_E
            elif value == "5":
                color = TEAL_E
            elif value == "6":
                color = BLUE_E
            else:
                color = None
            return color

        def updateTable(positions, changes, rects, texts, group, pause):
            fadeOutTogether = Group()

            for k in range(len(positions)):
                i = positions[k][0]
                j = positions[k][1]

                rects[i][j].set_color(WHITE)
                group.remove(texts[i][j])

                if changes[k] == "":
                    rects[i][j].set_fill(
                        WHITE, opacity=0)

                    fadeOutTogether.add(texts[i][j])

                if (getColor(changes[k])):
                    self.remove(texts[i][j])
                    texts[i][j] = MathTex(changes[k]).set_z_index(10).move_to(
                        rects[i][j].get_center())
                    rects[i][j].set_color(WHITE)
                    self.play(rects[i][j].animate.set_fill(
                        getColor(changes[k]), opacity=0.7), Write(texts[i][j]))

                group.add(texts[i][j])

                self.wait(pause)

            self.play(FadeOut(fadeOutTogether))
            self.wait(0.25)
            return rects, texts, group

        def updateTableX(positions, changes, rects, texts, group, pause):
            rects, texts, group = updateTable(
                positions, changes, rects, texts, group, 0)
            self.wait(0.25)
            changes2 = []
            positions2 = []
            for i in range(len(changes)):
                changes2.append("")
                positions2.append(positions[len(positions) - i - 1])
            rects, texts, group = updateTable(
                positions2, changes2, rects, texts, group, 0)
            return rects, texts, group

        def setBorderColor(positions, rects, color, pause):
            for k in range(len(positions)):
                i = positions[k][0]
                j = positions[k][1]

                rects[i][j].set_z_index(10)
                self.play(rects[i][j].animate.set_color(
                    color).set_fill(color, opacity=0))
                self.wait(0.2)

            self.wait(pause)
            return rects

        def createTable(grid, runTime=0.005):
            gridTableRects = []
            gridTableTexts = []

            p = Point([-5, 3, 0])
            tableGroup = Group()

            for i in range(len(gridBig)):
                grid = []
                gridT = []
                for j in range(len(gridBig[0])):
                    rect = Rectangle(
                        height=0.7, width=1.1, stroke_color=WHITE
                    )

                    if (getColor(gridBig[i][j])):
                        rect.set_fill(getColor(gridBig[i][j]), opacity=0.7)

                    if i == 0 and j == 0:
                        grid.append(rect.next_to(p, RIGHT, buff=0))
                    elif j == 0:
                        grid.append(rect.next_to(
                            gridTableRects[i-1][j], DOWN, buff=0))
                    else:
                        grid.append(rect.next_to(grid[j-1], RIGHT, buff=0))

                    gridT.append(MathTex(gridBig[i][j]).move_to(
                        grid[j].get_center()))

                    if runTime == 0:
                        self.add(grid[j], gridT[j])
                    else:
                        self.play(Create(grid[j]), FadeIn(
                            gridT[j]), run_time=runTime)
                    tableGroup.add(grid[j], gridT[j])

                gridTableRects.append(grid)
                gridTableTexts.append(gridT)

            return gridTableRects, gridTableTexts, tableGroup

        # Title Text
        titleText = Text("""
                        Mustang Math Tournament 2022:
                        Mounting Mayhem Palomino
                        """)
        mustangMathLogo = ImageMobject('logo.png').next_to(titleText, UP)

        self.play(FadeIn(mustangMathLogo), Write(titleText))
        self.wait(5)
        self.play(FadeOut(titleText), FadeOut(mustangMathLogo))
        self.wait(1)

        # Create Table
        gridBig = [
            ["", "4", "", "", "", "", "", "4", ""],
            ["", "", "", "", "5", "", "", "", ""],
            ["3", "", "", "", "", "", "", "", "3"],
            ["", "", "6", "", "", "", "3", "", ""],
            ["", "", "", "", "4", "", "", "", ""],
            ["4", "", "", "", "", "", "", "", "4"],
            ["", "", "", "5", "", "6", "", "", ""],
            ["", "", "4", "", "", "", "4", "", ""],
            ["1", "", "", "", "", "", "", "", "2"],
            ["4", "", "", "", "4", "", "", "", "4"],
        ]

        gridTableRect1, gridTableText1, tableGroup1 = createTable(gridBig)
        self.wait(1)

        # Borders of 4's
        setBorderColor([[0, 1], [0, 7], [4, 4], [5, 0],
                       [5, 8], [7, 2], [7, 6], [9, 0], [9, 4], [9, 8]], gridTableRect1, GREEN, 0.5)
        self.wait(1)
        gridTableRect1, gridTableText1, tableGroup1 = updateTable(
            [[9, 0], [9, 1], [8, 1], [8, 2], [7, 2]], ["4", "4", "4", "4", "4"], gridTableRect1, gridTableText1, tableGroup1, 0)
        self.wait(1)
        setBorderColor([[9, 0], [9, 1], [8, 1], [8, 2],
                       [7, 2]], gridTableRect1, RED, 0.5)
        self.play(FadeOut(tableGroup1))
        self.wait(1)

        # Interesting features about 4's
        tableExample1 = createFeature([["4", "4"], ["4", "4"]])
        tableExample2 = createFeature([["", "4", ""], ["4", "4", "4"]])
        tableExample3 = createFeature([["4", "4", "4", "4"]])
        tableExample4 = createFeature([["4", ""], ["4", ""], ["4", "4"]], True)
        tableExample5 = createFeature([["4", "4", ""], ["", "4", "4"]])

        g1 = Group(
            tableExample1.scale(0.75),
            tableExample2.scale(0.75),
            tableExample3.scale(0.75),
            tableExample4.scale(0.75),
            tableExample5.scale(0.75)
        ).scale(0.75).arrange_in_grid(buff=1)

        self.play(Create(tableExample1))
        self.wait(1)
        self.play(Create(tableExample2))
        self.wait(1)
        self.play(Create(tableExample3))
        self.wait(1)
        self.play(Create(tableExample4))
        self.wait(1)
        self.play(Create(tableExample5))
        self.wait(1)

        #text = Text("TETRIX")
        #vGroup = Group(text, g1).arrange(DOWN, buff=.8)
        # self.play(Write(text))
        # self.wait(1)
        self.play(FadeOut(g1))

        # Update Table
        # 3
        gridTableRect, gridTableText, tableGroup = createTable(gridBig, 0)
        self.wait(1)
        setBorderColor([[9, 0]], gridTableRect, GREEN, 0.5)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[9, 0]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[9, 1]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTableX(
            [[9, 2], [9, 3]], ["4", "4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTableX(
            [[8, 1], [8, 2]], ["4", "4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[8, 1], [9, 2]], ["4", "4"], gridTableRect, gridTableText, tableGroup, 0)

        # 4
        setBorderColor([[9, 8]], gridTableRect, GREEN, 0.5)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[9, 8], [9, 7], [8, 7], [9, 6]], ["4", "4", "4", "4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[7, 8]], ["2"], gridTableRect, gridTableText, tableGroup, 0)

        # 5
        setBorderColor([[9, 4]], gridTableRect, GREEN, 0.5)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[9, 4], [8, 4]], ["4", "4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[8, 3]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[8, 2], [9, 3]], ["1", "1"], gridTableRect, gridTableText, tableGroup, 0)
        #setBorderColor([[8, 0], [8, 2], [9, 3]], gridTableRect, RED, 0.5)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[9, 3], [8, 2], [8, 3]=], ["", "", ""], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[7, 4], [6, 4]], ["4", "4"], gridTableRect, gridTableText, tableGroup, 0)

        # 6
        setBorderColor([[7, 6]], gridTableRect, GREEN, 0.5)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[7, 6]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[6, 6], [5, 6]], ["4", "4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTableX(
            [[5, 5]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTableX(
            [[4, 6]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTableX(
            [[6, 7]], ["4"], gridTableRect, gridTableText, tableGroup, 0)

        # 7
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[5, 5]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTableX(
            [[7, 5], [8, 5], [8, 6], [9, 5]], ["6", "6", "6", "6"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[5, 5], [4, 6]], ["", "4"], gridTableRect, gridTableText, tableGroup, 0)

        setBorderColor([[7, 2]], gridTableRect, GREEN, 0.5)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[7, 2]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[6, 2], [5, 2]], ["4", "4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTableX(
            [[5, 3]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTableX(
            [[6, 1]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTableX(
            [[4, 2]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[5, 3]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[7, 3], [8, 3], [8, 2], [9, 3]], ["5", "5", "5", "5"], gridTableRect, gridTableText, tableGroup, 0)

        # 8
        setBorderColor([[5, 8]], gridTableRect, GREEN, 0.5)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[5, 8]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[5, 7]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        #setBorderColor([[5, 7]], gridTableRect, RED, 0.5)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[5, 7]], [""], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[4, 8], [3, 8], [3, 7]], ["4", "4", "4"], gridTableRect, gridTableText, tableGroup, 0)

        setBorderColor([[5, 0]], gridTableRect, GREEN, 0.5)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[5, 0]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[4, 0], [4, 1]], ["4", "4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTableX(
            [[5, 1]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[3, 1]], ["4"], gridTableRect, gridTableText, tableGroup, 0)

        # 9
        setBorderColor([[4, 4]], gridTableRect, GREEN, 0.5)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[4, 4]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTableX(
            [[4, 3]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[3, 4]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTableX(
            [[3, 3]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTableX(
            [[3, 5]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[1, 1]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[1, 7]], ["4"], gridTableRect, gridTableText, tableGroup, 0)

        # 10
        setBorderColor([[2, 0], [3, 6], [2, 8]], gridTableRect, YELLOW, 0)
        self.wait(0.5)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[2, 0], [3, 6], [2, 8]], ["3", "3", "3"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[2, 6]], ["3"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTableX(
            [[1, 6]], ["3"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTableX(
            [[2, 5]], ["3"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[2, 6]], [""], gridTableRect, gridTableText, tableGroup, 0)
        setBorderColor([[2, 8]], gridTableRect, YELLOW, 0.5)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[2, 8]], ["3"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTableX(
            [[2, 7], [2, 6]], ["3", "3"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[1, 8]], ["3"], gridTableRect, gridTableText, tableGroup, 0)
        self.wait(0.5)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[0, 6], [1, 6]], ["4", "4"], gridTableRect, gridTableText, tableGroup, 0)

        # 11
        setBorderColor([[4, 4]], gridTableRect, GREEN, 0.5)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[4, 4]], ["4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTableX(
            [[3, 5], [2, 5], [2, 6]], ["4", "4", "3"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[3, 3], [2, 3]], ["4", "4"], gridTableRect, gridTableText, tableGroup, 0)

        # 12
        setBorderColor([[3, 2]], gridTableRect, BLUE, 0.5)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[3, 2]], ["6"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[4, 2], [4, 3], [2, 2], [2, 1], [1, 2]], ["6", "6", "6", "6", "6"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[2, 1], [4, 3], [4, 2]], ["", "", ""], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[0, 0], [1, 0]], ["4", "4"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[2, 1], [3, 0]], ["3", "3"], gridTableRect, gridTableText, tableGroup, 0)

        # 13
        self.play(FadeOut(tableGroup))
        self.wait(1)
        # Interesting features about 4's
        tableExample1 = createFeature([["1"]])
        tableExample2 = createFeature([["1"]])
        tableExample3 = createFeature([["2"], ["2"]])
        tableExample4 = createFeature([["2"], ["2"]])
        tableExample5 = createFeature([["3"], ["3"], ["3"]])
        tableExample6 = createFeature([["3"], ["3"], ["3"]])
        tableExample7 = createFeature([["3", "3"], ["3", ""]])
        tableExample8 = createFeature([["3", "3"], ["3", ""]])
        tableExample9 = createFeature([["4", "4"], ["4", "4"]])
        tableExample10 = createFeature([["4", "4"], ["4", "4"]])
        tableExample11 = createFeature([["", "4", ""], ["4", "4", "4"]])
        tableExample12 = createFeature([["", "4", ""], ["4", "4", "4"]])
        tableExample13 = createFeature([["4", "4", "4", "4"]])
        tableExample14 = createFeature([["4", "4", "4", "4"]])
        tableExample15 = createFeature(
            [["4", ""], ["4", ""], ["4", "4"]], True)
        tableExample16 = createFeature(
            [["4", ""], ["4", ""], ["4", "4"]], True)
        tableExample17 = createFeature([["4", "4", ""], ["", "4", "4"]])
        tableExample18 = createFeature([["4", "4", ""], ["", "4", "4"]])
        tableExample19 = createFeature(
            [["5", ""], ["5", "5"], ["5", ""], ["5", ""]], True)
        tableExample20 = createFeature(
            [["5", ""], ["5", "5"], ["5", ""], ["5", ""]], True)
        tableExample21 = createFeature(
            [["6", "6"], ["6", ""], ["6", ""], ["6", ""], ["6", ""]], True)
        tableExample22 = createFeature(
            [["6", "6"], ["6", ""], ["6", ""], ["6", ""], ["6", ""]], True)

        tableExample = [tableExample1, tableExample2, tableExample3, tableExample4, tableExample5, tableExample6, tableExample7, tableExample8, tableExample9, tableExample10,
                        tableExample11, tableExample12, tableExample13, tableExample14, tableExample15, tableExample16, tableExample17, tableExample18, tableExample19, tableExample20, tableExample21, tableExample22]

        g1 = Group(
            tableExample1.scale(0.5),
            tableExample2.scale(0.5),
            tableExample3.scale(0.5),
            tableExample4.scale(0.5),
            tableExample5.scale(0.5),
            tableExample6.scale(0.5),
            tableExample7.scale(0.5),
            tableExample8.scale(0.5),
            tableExample9.scale(0.5),
            tableExample10.scale(0.5),
            tableExample11.scale(0.5),
            tableExample12.scale(0.5),
            tableExample13.scale(0.5),
            tableExample14.scale(0.5),
            tableExample15.scale(0.5),
            tableExample16.scale(0.5),
            tableExample17.scale(0.5),
            tableExample18.scale(0.5),
            tableExample19.scale(0.5),
            tableExample20.scale(0.5),
            tableExample21.scale(0.5),
            tableExample22.scale(0.5),
        ).scale(0.8).arrange_in_grid(4, 6, buff=0.3)

        self.play(Create(tableExample1))
        self.wait(0.2)
        self.play(Create(tableExample2))
        self.wait(0.2)
        self.play(Create(tableExample3))
        self.wait(0.2)
        self.play(Create(tableExample4))
        self.wait(0.2)
        self.play(Create(tableExample5))
        self.wait(0.2)
        self.play(Create(tableExample6))
        self.wait(0.2)
        self.play(Create(tableExample7))
        self.wait(0.2)
        self.play(Create(tableExample8))
        self.wait(0.2)
        self.play(Create(tableExample9))
        self.wait(0.2)
        self.play(Create(tableExample10))
        self.wait(0.2)
        self.play(Create(tableExample11))
        self.wait(0.2)
        self.play(Create(tableExample12))
        self.wait(0.2)
        self.play(Create(tableExample13))
        self.wait(0.2)
        self.play(Create(tableExample14))
        self.wait(0.2)
        self.play(Create(tableExample15))
        self.wait(0.2)
        self.play(Create(tableExample16))
        self.wait(0.2)
        self.play(Create(tableExample17))
        self.wait(0.2)
        self.play(Create(tableExample18))
        self.wait(0.2)
        self.play(Create(tableExample19))
        self.wait(0.2)
        self.play(Create(tableExample20))
        self.wait(0.2)
        self.play(Create(tableExample21))
        self.wait(0.2)
        self.play(Create(tableExample22))
        self.wait(0.2)

        for table in tableExample:
            self.play(table.animate.set_opacity(0.2), run_time=0.05)

        text = Text("90-80=10")
        self.play(Write(text))
        self.wait(1)
        self.play(FadeOut(text), FadeOut(g1))
        self.play(FadeIn(tableGroup))
        # 14
        self.wait(1)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[4, 2], [4, 3], [0, 2], [5, 5], [5, 4], [7, 5], [8, 5], [9, 5], [8, 6]], ["6", "6", "6", "6", "6", "6", "6", "6", "1"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTableX(
            [[0, 5], [1, 5], [2, 5], [3, 5]], ["5", "5", "5", "5"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[4, 7], [5, 7], [6, 7], [6, 8], [7, 7]], ["5", "5", "5", "5", "5"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[5, 1], [6, 0], [6, 1], [7, 0], [7, 1]], ["5", "5", "5", "5", "5"], gridTableRect, gridTableText, tableGroup, 0)
        setBorderColor([[3, 6]], gridTableRect, YELLOW, 0.5)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[3, 6], [0, 8]], ["3", "3"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[0, 3], [0, 4], [0, 5]], ["3", "3", "3"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[1, 3], [1, 5], [2, 4], [2, 5]], ["5", "5", "5", "5"], gridTableRect, gridTableText, tableGroup, 0)
        gridTableRect, gridTableText, tableGroup = updateTable(
            [[3, 5], [4, 5], [2, 6], [2, 7]], ["3", "3", "2", "2"], gridTableRect, gridTableText, tableGroup, 0)

#OLD

class Fillomino(Scene):
    def construct(self):
        gridBig = [
            ["", "4", "", "", "", "", "", "4", ""],
            ["", "", "", "", "5", "", "", "", ""],
            ["3", "", "", "", "", "", "", "", "3"],
            ["", "", "6", "", "", "", "3", "", ""],
            ["", "", "", "", "4", "", "", "", ""],
            ["4", "", "", "", "", "", "", "", "4"],
            ["", "", "", "5", "", "6", "", "", ""],
            ["", "", "4", "", "", "", "4", "", ""],
            ["1", "", "", "", "", "", "", "", "2"],
            ["4", "", "", "", "4", "", "", "", "4"],
        ]

        table = Table(
            gridBig,
            include_outer_lines=True,
            arrange_in_grid_config={"cell_alignment": LEFT},
        )
        for i in range(len(gridBig)):
            for j in range(len(gridBig[0])):
                color = None
                if gridBig[i][j] == "1":
                    color = RED
                elif gridBig[i][j] == "2":
                    color = ORANGE
                elif gridBig[i][j] == "3":
                    color = YELLOW
                elif gridBig[i][j] == "4":
                    color = GREEN
                elif gridBig[i][j] == "5":
                    color = TEAL
                elif gridBig[i][j] == "6":
                    color = BLUE
                if color != None:
                    try:
                        table.add_highlighted_cell((i + 1, j + 1), color=color)
                    except Exception as e:
                        print(e)
        table = table.scale(0.5)

        # Table Grid Function
        # coords is [[y,x],[y,x]...]
        # values is [val,val,val...]
        def getColor(value):
            if value == "1":
                color = RED
            elif value == "2":
                color = ORANGE
            elif value == "3":
                color = YELLOW
            elif value == "4":
                color = GREEN
            elif value == "5":
                color = TEAL
            elif value == "6":
                color = BLUE
            else:
                color=None
            return color

        def updateTable(grid, coords, values):
            #coords are y,x
            #vals are 1 to 6
            #grid is the main grid
            table = Table(
                grid,
                include_outer_lines=True,
                arrange_in_grid_config={"cell_alignment": LEFT},
            )
            #color table
            for i in range(len(gridBig)):
                for j in range(len(gridBig[0])):
                    color = getColor(gridBig[i][j])
                    if (color != None) and ([i+1,j+1] not in coords):
                        try:
                            table.add_highlighted_cell((i + 1, j + 1), color=color)
                        except Exception as e:
                            print(e)

            table = table.scale(0.5)
            anims = []
            ind=0
            nums = []
            for pair in coords:
                color = getColor(values[ind])
                rec = table.get_highlighted_cell((pair[0], pair[1]), color=color).set_z_index(-10)
                nums.append(Text(values[ind]).shift((rec.get_x()-0.001)*RIGHT + rec.get_y()*UP).scale(0.5))
                anims.append(Write(nums[ind]))
                anims.append(Create(rec,remover=True))
                ind+=1
            #print(nums)
            #print(anims)
            #add table and play anims
            self.add(table)
            self.play(*anims, lag_ratio = 1.0)
            self.remove(*nums)
            self.remove(table)

            #make new grid
            index = 0
            for pair in coords:
                grid[pair[0] - 1][pair[1] - 1] = values[index]
                index += 1

            #make new table
            table = Table(
                grid,
                include_outer_lines=True,
                arrange_in_grid_config={"cell_alignment": LEFT},
            )
            return table, anims

        self.play(Create(table, run_time=2))
        self.wait(1)
        self.remove(table)
        
        #Bottom left y shape
        table, anims = updateTable(gridBig, [[10,2],[9,2],[10,3]], ["4", "4","4"])
        #Bottom right y shape
        table, anims = updateTable(gridBig, [[10,8],[10,7],[9,8]], ["4", "4","4"])
        #Bottom right 2
        table, anims = updateTable(gridBig, [[8,9]], ["2"])
        
        #Bottom middle line shape
        table, anims = updateTable(gridBig, [[9,5],[8,5],[7,5]], ["4", "4","4"])
        #middle right line shape
        table, anims = updateTable(gridBig, [[7,7],[6,7], [5,7]], ["4", "4", "4"])
        #middle left L shape
        table, anims = updateTable(gridBig, [[7,3],[6,3],[6,4]], ["4", "4", "4"])
        #bottom left weird 5 shape
        table, anims = updateTable(gridBig, [[8,4],[8,4],[9,3],[9,4],[10,4]], ["5", "5","5","5","5"])
        """#middle middle right singular six
        table, anims = updateTable(gridBig, [[6,6]], ["6"])"""
        #middle right L shape
        table, anims = updateTable(gridBig, [[5,9],[4,9],[4,8]], ["4", "4","4"])
        #middle left Z shape
        table, anims = updateTable(gridBig, [[5,1],[5,2],[4,2]], ["4", "4","4"])
        #middle top singular 4
        table, anims = updateTable(gridBig, [[4,5]], ["4"])
        #left top singular 4
        table, anims = updateTable(gridBig, [[2,2]], ["4"])
        #right top singular 4
        table, anims = updateTable(gridBig, [[2,8]], ["4"])
        #right top singular 3
        table, anims = updateTable(gridBig, [[2,9]], ["3"])
        #top right square 4
        table, anims = updateTable(gridBig, [[1,7],[2,7]], ["4", "4"])
        #middle left Z shape 4 finished
        table, anims = updateTable(gridBig, [[4,4],[3,4]], ["4", "4"])
        #middle left 3 in a row 6
        table, anims = updateTable(gridBig, [[3,3],[2,3]], ["6", "6"])
        #top left square 4 finished
        table, anims = updateTable(gridBig, [[1,1],[2,1]], ["4", "4"])
        #top left triangle 3
        table, anims = updateTable(gridBig, [[3,2],[4,1]], ["3", "3"])
        #Fill in both 6s
        table, anims = updateTable(gridBig, [[1,3],[5,3],[9,6],[8,6],[10,6],[6,5],[6,6],[5,4]], ["6","6", "6", "6","6","6","6", "6"])
        #bottom right 1
        table, anims = updateTable(gridBig, [[9,7]], ["1"])
        
        #bottom right 5
        table, anims = updateTable(gridBig, [[5,8],[6,8],[7,8],[7,9],[8,8]], ["5","5","5","5","5"])
        #bottom left 5
        table, anims = updateTable(gridBig, [[6,2],[7,2],[8,2],[8,1],[7,1]], ["5","5","5","5","5"])
        #top right straight 3 completed
        table, anims = updateTable(gridBig, [[1,9]], ["3"])
        #top middle 3
        table, anims = updateTable(gridBig, [[1,4],[1,5],[1,6]], ["3", "3","3"])
        #top middle 5
        table, anims = updateTable(gridBig, [[2,4],[2,6],[3,5],[3,6]], ["5","5","5","5"])
        #middle right 3
        table, anims = updateTable(gridBig, [[4,6], [5,6]], ["3", "3"])
        #top right 2
        table, anims = updateTable(gridBig, [[3,7],[3,8]], ["2","2"])


        self.wait(3)