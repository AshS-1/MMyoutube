# -*- coding: utf-8 -*-
"""Bingo #21

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18MK4X4kNUv7tuVXPzSanhY0fCmCmq4PL
"""

!sudo apt update
!sudo apt install libcairo2-dev ffmpeg \
    texlive texlive-latex-extra texlive-fonts-extra \
    texlive-latex-recommended texlive-science \
    tipa libpango1.0-dev
!pip install manim
!pip install IPython --upgrade

from manim import *
import os

# Commented out IPython magic to ensure Python compatibility.
# %%manim -pqh -v WARNING Bingo21
# 
# class Bingo21(Scene):
#     def construct(self):
#         # Intro Slide
#         titleText = Text("""
#             Mustang Math Tournament 2022:
#             Bingo #21
#         """)
#         descriptionText = Text("""
#         21. Arpit the Ant is looking for a path to go back to MMT HQ.\n
#         If Arpit only travels on a 4x4 grid, may only move left, right,\n 
#         and upwards, and never goes back to a point he's already been,\n
#         how many paths are there for Arpit to travel?
#         """, font_size=24, line_spacing=0, tab_width=-4).next_to(titleText, DOWN)
#         mustangMathLogo = ImageMobject(os.path.join(
#             os.path.dirname(__file__), 'logo.png')).next_to(titleText, UP)
# 
#         #self.play(Write(titleText), Write(descriptionText))
#         self.play(FadeIn(mustangMathLogo), Write(
#             titleText), Write(descriptionText))
#         self.wait(19.5)
#         #self.play(FadeOut(titleText), FadeOut(descriptionText))
#         self.play(FadeOut(titleText), FadeOut(
#             descriptionText), FadeOut(mustangMathLogo))
#         #self.wait(20)
# 
#         # Diagram
#         rect = Rectangle(width=4.0, height=4.0,
#                          grid_xstep=1.0, grid_ystep=1.0)
#         self.play(Create(rect, run_time=1.5))
#         self.wait(0.5)
# 
#         point1 = Dot(point=[2, 2, 0], color=GREEN, radius=0.15)
#         point2 = Dot(point=[-2, -2, 0], color=BLUE, radius=0.15)
#         self.play(Create(point1), Create(point2), run_time=1)
#         self.wait(0.5)
# 
#         text1 = Text('MMT\nHeadquarters', color=GREEN,
#                      font_size=24).move_to([3.15, 2.45, 0])
# 
#         text2 = Text('Arpit\nthe Ant', color=BLUE,
#                      font_size=24).move_to([-2.53, -2.2, 0])
# 
#         self.play(Write(text1), Write(text2))
#         self.wait(1)
#         self.remove(text2)
# 
#         text2 = Text('Start', color=BLUE,
#                      font_size=24).move_to([-2.53, -2.2, 0])
#         self.add(text2)
#         self.wait(2)
#         self.remove(point2)
# 
#         # Make random paths: 1
#         point21 = Dot(point=[-2, -2, 0], color=BLUE, radius=0.15)
#         l11 = Line(start=[-2, -2, 0], end=[-2, 2, 0])
#         l21 = VMobject()
#         self.add(l11, l21, point21)
#         l21.add_updater(lambda x: x.become(
#             Line((-2, -2, 0), point21.get_center()).set_color(YELLOW)))
#         self.play(MoveAlongPath(point21, l11), run_time=1)
#         self.remove(l11, point21)
# 
#         point22 = Dot(point=[-2, -2, 0], color=BLUE, radius=0.15)
# 
#         l12 = Line(start=[-2, 2, 0], end=[2, 2, 0])
#         l22 = VMobject()
#         self.add(l12, l22, point22)
#         l22.add_updater(lambda x: x.become(
#             Line((-2, 2, 0), point22.get_center()).set_color(YELLOW)))
#         self.play(MoveAlongPath(point22, l12), run_time=1)
#         self.wait(1)
#         self.remove(l21, l12, l22, point22)
# 
#         # Make random paths: 2
#         point21 = Dot(point=[-2, -2, 0], color=BLUE, radius=0.15)
#         l11 = Line(start=[-2, -2, 0], end=[-2, 1, 0])
#         l21 = VMobject()
#         self.add(l11, l21, point21)
#         l21.add_updater(lambda x: x.become(
#             Line((-2, -2, 0), point21.get_center()).set_color(YELLOW)))
#         self.play(MoveAlongPath(point21, l11), run_time=1)
#         self.remove(l11, point21)
# 
#         point22 = Dot(point=[-2, -2, 0], color=BLUE, radius=0.15)
# 
#         l12 = Line(start=[-2, 1, 0], end=[1, 1, 0])
#         l22 = VMobject()
#         self.add(l12, l22, point22)
#         l22.add_updater(lambda x: x.become(
#             Line((-2, 1, 0), point22.get_center()).set_color(YELLOW)))
#         self.play(MoveAlongPath(point22, l12), run_time=1)
#         self.remove(l12, point22)
# 
#         point23 = Dot(point=[-2, -2, 0], color=BLUE, radius=0.15)
# 
#         l13 = Line(start=[1, 1, 0], end=[1, 2, 0])
#         l23 = VMobject()
#         self.add(l13, l23, point23)
#         l23.add_updater(lambda x: x.become(
#             Line((1, 1, 0), point23.get_center()).set_color(YELLOW)))
#         self.play(MoveAlongPath(point23, l13), run_time=1)
#         self.remove(l13, point23)
# 
#         point24 = Dot(point=[-2, -2, 0], color=BLUE, radius=0.15)
# 
#         l14 = Line(start=[1, 2, 0], end=[2, 2, 0])
#         l24 = VMobject()
#         self.add(l14, l24, point24)
#         l24.add_updater(lambda x: x.become(
#             Line((1, 2, 0), point24.get_center()).set_color(YELLOW)))
#         self.play(MoveAlongPath(point24, l14), run_time=0.7)
#         self.wait(1)
#         self.remove(l14, l21, l22, l23, l24, point24)
# 
#         # Make random paths: 3
#         point21 = Dot(point=[-2, -2, 0], color=BLUE, radius=0.15)
#         l11 = Line(start=[-2, -2, 0], end=[0, -2, 0])
#         l21 = VMobject()
#         self.add(l11, l21, point21)
#         l21.add_updater(lambda x: x.become(
#             Line((-2, -2, 0), point21.get_center()).set_color(YELLOW)))
#         self.play(MoveAlongPath(point21, l11), run_time=1)
#         self.remove(l11, point21)
# 
#         point22 = Dot(point=[-2, -2, 0], color=BLUE, radius=0.15)
# 
#         l12 = Line(start=[0, -2, 0], end=[0, 0, 0])
#         l22 = VMobject()
#         self.add(l12, l22, point22)
#         l22.add_updater(lambda x: x.become(
#             Line((0, -2, 0), point22.get_center()).set_color(YELLOW)))
#         self.play(MoveAlongPath(point22, l12), run_time=1)
#         self.remove(l12, point22)
# 
#         point23 = Dot(point=[-2, -2, 0], color=BLUE, radius=0.15)
# 
#         l13 = Line(start=[0, 0, 0], end=[1, 0, 0])
#         l23 = VMobject()
#         self.add(l13, l23, point23)
#         l23.add_updater(lambda x: x.become(
#             Line((0, 0, 0), point23.get_center()).set_color(YELLOW)))
#         self.play(MoveAlongPath(point23, l13), run_time=0.8)
#         self.remove(l13, point23)
# 
#         point24 = Dot(point=[-2, -2, 0], color=BLUE, radius=0.15)
# 
#         l14 = Line(start=[1, 0, 0], end=[1, 1, 0])
#         l24 = VMobject()
#         self.add(l14, l24, point24)
#         l24.add_updater(lambda x: x.become(
#             Line((1, 0, 0), point24.get_center()).set_color(YELLOW)))
#         self.play(MoveAlongPath(point24, l14), run_time=0.8)
#         self.remove(l14, point24)
# 
#         point25 = Dot(point=[-2, -2, 0], color=BLUE, radius=0.15)
# 
#         l15 = Line(start=[1, 1, 0], end=[2, 1, 0])
#         l25 = VMobject()
#         self.add(l15, l25, point25)
#         l25.add_updater(lambda x: x.become(
#             Line((1, 1, 0), point25.get_center()).set_color(YELLOW)))
#         self.play(MoveAlongPath(point25, l15), run_time=0.8)
#         self.remove(l15, point25)
# 
#         point26 = Dot(point=[-2, -2, 0], color=BLUE, radius=0.15)
# 
#         l16 = Line(start=[2, 1, 0], end=[2, 2, 0])
#         l26 = VMobject()
#         self.add(l16, l26, point26)
#         l26.add_updater(lambda x: x.become(
#             Line((2, 1, 0), point26.get_center()).set_color(YELLOW)))
#         self.play(MoveAlongPath(point26, l16), run_time=0.8)
#         self.wait(1)
#         self.remove(l16, l21, l22, l23, l24, l25, l26, point26)
# 
#         # (0,1) Specifications
#         point21 = Dot(point=[-2, -2, 0], color=BLUE, radius=0.15)
#         l11 = Line(start=[-2, -2, 0], end=[-2, -1, 0])
#         bottom = VMobject()
#         self.add(l11, bottom, point21)
# 
#         def adapter(x): return x.become(
#             Line((-2, -2, 0), point21.get_center()).set_color(YELLOW))
#         bottom.add_updater(adapter)
#         self.play(MoveAlongPath(point21, l11), run_time=1)
#         self.remove(l11)
#         self.wait(0.2)
# 
#         bottom.set_color(RED)
#         bottom.remove_updater(adapter)
#         self.wait(0.5)
# 
#         arrow_1 = Arrow(start=[-2, -1, 0],
#                         end=[-2, 0, 0], color=YELLOW, buff=1)
#         arrow_2 = Arrow(start=[-2, -1, 0],
#                         end=[-1, -1, 0], color=YELLOW, buff=1)
#         self.play(Create(arrow_1), Create(arrow_2))
#         self.wait(1)
#         self.remove(arrow_1, arrow_2, point21)
# 
#         # (0,2) Specifications
#         point21 = Dot(point=[-2, -2, 0], color=BLUE, radius=0.15)
#         l11 = Line(start=[-2, -1, 0], end=[-2, 0, 0])
#         l21 = VMobject()
#         self.add(l11, l21, point21)
# 
#         def adapter(x): return x.become(
#             Line((-2, -1, 0), point21.get_center()).set_color(YELLOW))
#         l21.add_updater(adapter)
#         self.play(MoveAlongPath(point21, l11), run_time=1)
#         self.remove(l11)
#         self.wait(1)
# 
#         l21.set_color(RED)
#         l21.remove_updater(adapter)
#         self.wait(1)
# 
#         arrow_1 = Arrow(start=[-2, 0, 0], end=[-2, 1, 0], color=YELLOW, buff=1)
#         arrow_2 = Arrow(start=[-2, 0, 0], end=[-1, 0, 0], color=YELLOW, buff=1)
#         self.play(Create(arrow_1), Create(arrow_2))
#         self.wait(1)
#         self.remove(arrow_1, arrow_2, point21, l21, l11)
# 
#         # (1, 1) Specifications
#         point21 = Dot(point=[-2, -2, 0], color=BLUE, radius=0.15)
#         l11 = Line(start=[-2, -1, 0], end=[-1, -1, 0])
#         l21 = VMobject()
#         self.add(l11, l21, point21)
# 
#         def adapter(x): return x.become(
#             Line((-2, -1, 0), point21.get_center()).set_color(YELLOW))
#         l21.add_updater(adapter)
#         self.play(MoveAlongPath(point21, l11), run_time=1)
#         self.remove(l11)
#         self.wait(0.2)
# 
#         l21.set_color(RED)
#         l21.remove_updater(adapter)
#         self.wait(0.5)
# 
#         arrow_1 = Arrow(start=[-1, -1, 0],
#                         end=[0, -1, 0], color=YELLOW, buff=1)
#         arrow_2 = Arrow(start=[-1, -1, 0],
#                         end=[-1, 0, 0], color=YELLOW, buff=1)
#         self.play(Create(arrow_1), Create(arrow_2))
#         self.wait(1)
#         self.remove(arrow_1, arrow_2, point21, l21, l11, bottom)
#         self.wait(1)
# 
#         # horizontal arrows
#         point21 = Dot(point=[0, 0, 0], color=BLUE, radius=0.15)
#         self.add(point21)
# 
#         arrow_1 = Arrow(start=[0, 0, 0],
#                         end=[-1, 0, 0], color=YELLOW, buff=1)
#         arrow_2 = Arrow(start=[0, 0, 0],
#                         end=[1, 0, 0], color=YELLOW, buff=1)
#         self.play(Create(arrow_1), Create(arrow_2))
#         self.wait(0.3)
# 
#         arrow_3 = Arrow(start=[-1, 0, 0],
#                         end=[-2, 0, 0], color=YELLOW, buff=1)
#         arrow_4 = Arrow(start=[1, 0, 0],
#                         end=[2, 0, 0], color=YELLOW, buff=1)
#         self.play(Create(arrow_3), Create(arrow_4))
#         self.wait(3)
# 
#         self.remove(arrow_1, arrow_2, arrow_3, arrow_4, point21)
#         self.wait(1)
# 
#         # vertical arrows
#         point21 = Dot(point=[0, 0, 0], color=BLUE, radius=0.15)
#         self.add(point21)
# 
#         arrow_1 = Arrow(start=[0, 0, 0],
#                         end=[0, 1, 0], color=YELLOW, buff=1)
#         arrow_2 = Arrow(start=[0, 1, 0],
#                         end=[0, 2, 0], color=YELLOW, buff=1)
#         self.play(Create(arrow_1))
#         self.wait(0.3)
#         self.play(Create(arrow_2))
#         self.wait(1)
#         self.remove(arrow_1, arrow_2, point21)
# 
#         # highlight lines
#         point21 = Dot(point=[-2, -2, 0], color=BLUE, radius=0.15)
#         self.add(point21)
# 
#         lines = []
#         colors = [YELLOW, GREEN, BLUE, PURPLE]
#         for j in range(-2, 2):
#             for i in range(-2, 3):
#                 line = Line(start=[i, j, 0], end=[
#                             i, j+1, 0]).set_color(colors[j+2])
#                 lines.append(line)
#                 self.play(Create(line), run_time=0.2)
#                 self.wait(0.3)
# 
#         self.wait(2)
#         for line in lines:
#             self.remove(line)
#         self.wait(1)
# 
#         # Outside arrows
#         arrow_1 = Arrow(start=[-3.2, -2, 0],
#                         end=[-2.2, -2, 0], color=YELLOW, buff=1)
#         arrow_2 = Arrow(start=[-3.2, -1, 0],
#                         end=[-2.2, -1, 0], color=YELLOW, buff=1)
#         arrow_3 = Arrow(start=[-3.2, 0, 0],
#                         end=[-2.2, 0, 0], color=YELLOW, buff=1)
#         arrow_4 = Arrow(start=[-3.2, 1, 0],
#                         end=[-2.2, 1, 0], color=YELLOW, buff=1)
#         arrow_5 = Arrow(start=[-3.2, 2, 0],
#                         end=[-2.2, 2, 0], color=YELLOW, buff=1)
#         self.play(Create(arrow_1), run_time=0.2)
#         self.play(Create(arrow_2), run_time=0.2)
#         self.play(Create(arrow_3), run_time=0.2)
#         self.play(Create(arrow_4), run_time=0.2)
#         self.play(Create(arrow_5), run_time=0.2)
#         self.wait(2)
#         self.remove(arrow_1, arrow_2, arrow_3, arrow_4, arrow_5)
# 
#         # Move dot to top
#         l11 = Line(start=[-2, -2, 0], end=[-2, 2, 0])
#         l21 = VMobject()
#         self.add(l11, l21, point21)
# 
#         def adapter(x): return x.become(
#             Line((-2, -2, 0), point21.get_center()).set_color(YELLOW))
#         l21.add_updater(adapter)
#         self.play(MoveAlongPath(point21, l11), run_time=1)
#         self.remove(l11)
#         self.wait(1)
# 
#         # Add arrows to left
#         arrow_1 = Arrow(start=[-2, 2, 0],
#                         end=[-1, 2, 0], color=YELLOW, buff=1)
#         arrow_2 = Arrow(start=[-1, 2, 0],
#                         end=[0, 2, 0], color=YELLOW, buff=1)
#         arrow_3 = Arrow(start=[0, 2, 0],
#                         end=[1, 2, 0], color=YELLOW, buff=1)
#         arrow_4 = Arrow(start=[1, 2, 0],
#                         end=[2, 2, 0], color=YELLOW, buff=1)
#         self.play(Create(arrow_1), run_time=0.2)
#         self.play(Create(arrow_2), run_time=0.2)
#         self.play(Create(arrow_3), run_time=0.2)
#         self.play(Create(arrow_4), run_time=0.2)
#         self.wait(1)
# 
#         # Add solution text
#         solution = MathTex(
#             r"5 \cdot 5 \cdot 5 \cdot 5 = ").next_to(rect, DOWN)
#         self.play(Write(solution))
# 
#         result = VGroup()  # create a VGroup
#         box = Rectangle(  # create a box
#             height=0.5, width=1, stroke_color=WHITE
#         ).next_to(solution, RIGHT)
#         text = MathTex(r"625").move_to(box.get_center())  # create text
#         result.add(box, text)  # add both objects to the VGroup
#         self.play(FadeIn(box), Write(text))
#         self.wait(1)